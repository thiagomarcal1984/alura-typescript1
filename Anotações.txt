Para instalar as dependências do arquivo package.json, use o comando:
    npm install

A pasta dist é a que contém os arquivos compartilhados com o servidor web.

Dentro do package.json existem alguns scripts, que podem ser executados
por meio do comando: 
    npm run <nome do script>.

Para rodar o servidor web, use o script server: 
     npm run server.

Crie o arquivo app.js dentro da pasta dist/js. Esse arquivo será tratado como
um módulo.

O import de um módulo JavaScript é diferente do import de um script normal:
    <script type="module" src="js/app.js"></script>

Repare na propriedade type="module".

A sintaxe de criação de classes no JavaScript é a seguinte:
    export class Classe {
        #propriedade1;
        #propriedade2;
        #propriedade3;

        #metodoPrivado() {
            console.log("Método privado.")
        }

        constructor(p1, p2, p3) {
            this.#propriedade1 = p1;
            this.#propriedade2 = p2;
            this.#propriedade3 = p3;
        }
    }

Por padrão os membros da classe (propriedades e métodos) são públicos. Para
torná-los privados, preceda-os com cerquilha.

Módulos são executados dentro do seu escopo. Portanto, sempre que você precisar
usar um módulo fora do seu escopo fechado, exporte esse módulo (no exemplo, a
classe Classe é o módulo que está sendo exportado).

Sintaxe para IMPORTAÇÃO de um módulo em um outro arquivo .js:
    import { Classe } from './modulo/classe.js';

De acordo com o ES2015 (EcmaScript2015), para criar o construtor de uma classe,
use a palavra reservada constructor:
    export class Negociacao {
        #data;
        #quantidade;
        #valor;

        constructor(data, quantidade, valor) {
            this.#data = data;
            this.#quantidade = quantidade;
            this.#valor = valor;
        }
    }

Para criar a instância, use: 
    const objeto = new Classe(true, "parm2", 3)

Como declarar os getters:
    classe Classe {
        ...
        get propriedade1() { // Na declação os parênteses são necessários.
            return this.#propriedade1;
        }
    }

Para invocar o getter, não é necessário sufixar com parênteses:
    const classe = new Classe(1, 2, "Três");
    console.log(classe.propriedade3); // Retorna "Três"

Em JavaScript, os erros só aparecem em tempo de execução, já que não há uma
compilação prévia. Usando TypeScript podemos forçar a checagem de erros antes
que eles surjam em tempo de execução.

Para instalar o TypeScript, use o comando: 
    npm install typescript@4.2.2 --save-dev

    Onde o @ precede a versão que será usada, e o parâmetro --save-dev instala 
    a dependência apenas no dev environment (não instala em produção).

Dorme com essa: npm significa Node Package Manager. Então, para instalar o 
TypeScript, o Node.js é obrigatório.

Ao renomear os arquivos .js (JavaScript) para .ts (TypeScript), o VS Code 
já identifica os erros de sintaxe antes mesmo da compilação do TypeScript.

O código TypeScript vai ficar na pasta app; o código visível pelo browser vai
estar na pasta dist.

O processo de compilação do TypeScript tem como resultado atualizações na pasta
dist na medida em que a pasta app for alterada.

As configurações do compilador TypeScript ficarão no arquivo tsconfig.json, na 
raiz do projeto.

Parâmetros mínimos no tsconfig.json:
    {
        "compilerOptions": {
            "noEmitOnError": true, // Não gerar o JS se a compilação falhar.
            "outDir": "dist/js", // Onde o tsc distribuirá o js compilado.
            "target": "ES6" // Versão do EcmaScript que será usada.
        },
        "include": ["app/**/*"] // Inclui na compilação as subpastas de app.
            // app = pasta raiz da compilação; ** = subpastas; * = arquivos.
    }

Note que o arquivo negociacao.js que foi gerado tem mais coisas que o 
negociacao.ts. Isso é para que o .js tenha as limitações do TypeScript.

Acrescentando o parâmetro -w no compilador TypeScript (tsc -w) faz com que 
as mudanças no diretório de origem (app) sejam vigiadas (watch).

Acrescente o código a seguir em package.json:
    "scripts": {
        ...
        "watch": "tsc -w"
    },

Note que dentro de scripts já havia o script "start", que roda o servidor web
e o comando watch (que não estava configurado até agora):
    "start": "concurrently \"npm run watch\" \"npm run server\"",

Agora, ao invés de rodarmos npm run server, vamos rodar npm run start.

A sintaxe para atributos privados no TypeScript é diferente do JavaScript:
    private _propriedade; // Sintaxe do TypeScript.
    #propriedade; // Sintaxe do JavaScript.
